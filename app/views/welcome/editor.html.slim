= javascript_include_tag 'ace/require', media: 'all', 'data-turbolinks-track' => true
= javascript_include_tag 'ace/ext/ext-language_tools.js', media: 'all', 'data-turbolinks-track' => true

css:
  #editor { 
    position: absolute;
    top: 60px;
    right: 0;
    bottom: 0;
    left: 0;
  }

javascript:
  require.config({
    baseUrl: window.location.protocol + "//" + window.location.host
      + window.location.pathname.split("/").slice(0, -1).join("/"),

      paths: {
        ace: "assets/ace/"
      }
  });

  require(["ace/ace"], function (ace) {
    ace.require("ace/ext/language_tools");
    var editor = ace.edit("editor");
    editor.session.setMode("ace/mode/vhdl");
    editor.setTheme("ace/theme/monokai");

    // Enable autocompletion and snippets
    editor.setOptions({
      enableBasicAutocompletion: true,
      enableSnippets: true,
      enableLiveAutocompletion: true
    });
  });

.row
  .col class="s12"
    #editor
      | -- Ejemplo codificaci√≥n de una compuerta AND de dos entradas

        library ieee;
        use ieee.std_logic_1164.all;

        entity compuerta_AND is
          port (
            A   : in  STD_LOGIC;      -- entrada 'A'
            B   : in  STD_LOGIC;      -- entrada 'B'
            SAL : out STD_LOGIC       -- salida de la compuerta AND
          );
        end compuerta_AND;

        architecture Behavioral of compuerta_AND is
        begin

          SAL <= A and B;             -- compuerta AND de 2 entradas

        end Behavioral;